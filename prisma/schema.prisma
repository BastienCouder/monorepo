generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime

  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum UserRole {
  MEMBER
  ADMINISTRATOR
  EDITOR
  OWNER
  READER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  role                  UserRole               @default(MEMBER)
  image                 String?
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  deleteAt              DateTime?
  storageLimit          Int                    @default(10000000000)
  storageUsed           Int                    @default(0)
  accounts              Account[]
  Session               Session[]
  TwoFactorConfirmation TwoFactorConfirmation?
  TeamLimit             TeamLimit?

  stripeCustomerId       String?      @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?      @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?      @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?    @map(name: "stripe_current_period_end")
  TeamMember             TeamMember[]
  Invitation             Invitation[]
  Folder                 Folder[]
  File                   File[]
  Team                   Team[]
  Action                 Action[]
}

model TeamLimit {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  count  Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id           String       @id @default(uuid())
  name         String
  slug         String
  key          String       @unique
  isKeyActive  Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  storageLimit Int          @default(1000000000)
  storageUsed  Int          @default(0)
  creatorId    String
  creator      User         @relation(fields: [creatorId], references: [id])
  members      TeamMember[]
  invitations  Invitation[]
  Folder       Folder[]
  File         File[]
  Action       Action[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id           String   @id @default(uuid())
  teamId       String
  email        String?
  role         UserRole @default(MEMBER)
  token        String   @unique
  expires      DateTime
  invitedBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  sentViaEmail Boolean  @default(true)

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model Folder {
  id         String   @id @default(cuid())
  name       String
  parentId   String?  @map("parent_id")
  parent     Folder?  @relation("Subfolders", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subfolders Folder[] @relation("Subfolders")
  files      File[]
  teamId     String?  @map("team_id")
  team       Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@index([parentId, teamId, userId])
}

model File {
  id          String    @id @default(cuid())
  name        String
  mimeType    String?
  size        Int
  path        String    @db.VarChar(555)
  firebaseUrl String?   @db.VarChar(555)
  folderId    String?   @map("folder_id")
  folder      Folder?   @relation(fields: [folderId], references: [id])
  teamId      String?   @map("team_id")
  team        Team?     @relation(fields: [teamId], references: [id])
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        FileTag[]

  @@index([folderId, teamId, userId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  files     FileTag[]
}

model FileTag {
  fileId String @map("file_id")
  tagId  String @map("tag_id")
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([fileId, tagId])
}

model Action {
  id         String   @id @default(uuid())
  type       String
  entityId   String
  entityType String
  teamId     String
  userId     String
  timestamp  DateTime @default(now())
  team       Team     @relation(fields: [teamId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}
